openapi: "3.0.0"
info:
  version: 1.0.0
  title: Orders API
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /products:
    get:
      summary: List all products
      operationId: getProducts
      tags:
        - products
      x-spring-paginated: true
      parameters:
        - name: page
          in: query
          description: Results page you want to retrieve (0..N).
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Number of records per page.
          x-spring-paginated-param: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a product
      operationId: addProduct
      tags:
        - products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedProduct"
  /products/{product_id}:
    get:
      summary: Get prodcut by its ID
      operationId: getProduct
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        200:
          description: Requested product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedProduct"
        404:
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cart_id}:
    get:
      summary: Get cart
      operationId: getCart
      tags:
        - carts
      parameters:
        - $ref: '#/components/parameters/cart_id'
      responses:
        '200':
          description: Cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cart_id}/items:
    post:
      summary: Add item to cart
      operationId: addItem
      tags:
        - carts
      parameters:
        - $ref: '#/components/parameters/cart_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
      responses:
        '201':
          description: Item is added to the cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Product:
      type: object
      required:
        - manufacturer
        - name
      properties:
        manufacturer:
          type: string
          maxLength: 128
        name:
          type: string
          maxLength: 128

    CreatedProduct:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
    Products:
      type: array
      items:
        $ref: "#/components/schemas/CreatedProduct"
    Cart:
      type: object
      required:
        - id
        - items
      properties:
        id:
          type: integer
          format: int64
        items:
          $ref: "#/components/schemas/Items"
    NewItem:
      type: object
      required:
        - productId
      properties:
        productId:
          type: integer
          format: int64
    Item:
      type: object
      required:
        - id
        - productId
        - manufacturer
        - name
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        manufacturer:
          type: string
          maxLength: 128
        name:
          type: string
          maxLength: 128
    Items:
      type: array
      items:
        $ref: "#/components/schemas/Item"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    product_id:
      name: product_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: ID of the product.
    cart_id:
      name: cart_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: ID of the cart.
